# -*- coding: utf-8 -*-
"""KELL

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KQe13rs8Dik8tqWq0OugD-H5fL_quHJz
"""

!pip install google-genai

nome = input("Opa! :) Sou o KELL, como gostaria de ser chamado?")

import google.generativeai as genai
import os


API_KEY = "AIzaSyAUtm3-czLqusg6hmsTSdgTAb5pJ76wrts"
genai.configure(api_key=API_KEY)


resposta_inicial = input(f" Muito prazer {nome} Você já tem algo em mente sobre qual curso fazer? (Sim/Não): ").lower()

informacao_para_gemini = ""

if resposta_inicial == "sim":
    informacao_para_gemini = input("Isso! Quais os cursos que você inicialmente pensou? ")
    informacao_para_gemini = "O usuário tem interesse nos seguintes cursos: " + informacao_para_gemini

elif resposta_inicial == "não":
    informacao_para_gemini = input("Fique tranquilo isso é normal! Conta pra mim seus interesses, habilidades ou as áreas que você gosta: ")
    informacao_para_gemini = "O usuário não tem cursos em mente, mas tem os seguintes interesses/habilidades: " + informacao_para_gemini

else:
    print("Beleza. Vou te perguntar seus interesses gerais como base.")
    informacao_para_gemini = input("Conta pra mim seus interesses, habilidades ou as áreas que você gosta: ")
    informacao_para_gemini = "O usuário não especificou, mas tem os seguintes interesses/habilidades: " + informacao_para_gemini

model = genai.GenerativeModel('gemini-2.0-flash')

print("\nAguarde um momento!\n")

prompt_para_gemini = f"""Com base nas seguintes informações sobre o usuário:
{informacao_para_gemini}

Por favor, gere algumas ideias de cursos de faculdade ou áreas de estudo que combinem com esses dados. Seja breve e liste as sugestões."""


try:
    response = model.generate_content(prompt_para_gemini)
    ideias_geradas = response.text

    print("🎓 Aqui estão algumas ideias de cursos para você! 🎓")
    print(ideias_geradas)


    quer_detalhes = input("\nGostaria de saber mais detalhes sobre algum curso da lista? (Sim/Não): ").lower()

    while quer_detalhes == "sim":

        nome_curso_detalhe = input("Qual curso você quer saber um pouco mais? (Digite o nome exato do curso): ")

        print(f"\nBuscando mais informações sobre {nome_curso_detalhe}... Aguarde!\n")

        prompt_detalhes_curso = f"""Forneça um breve resumo detalhado sobre o curso de "{nome_curso_detalhe}".
        Inclua informações sobre:
        - Conteúdos abordados/Matérias principais
        - Duração média do curso
        - Principais áreas de atuação profissional
        - Uma estimativa de média salarial (mencione que é uma estimativa e pode variar)
        Seja claro e objetivo."""

        try:
            response_detalhes = model.generate_content(prompt_detalhes_curso)
            detalhes_curso = response_detalhes.text

            # Mostrar os detalhes que o Gemini forneceu
            print(f"📚 Detalhes sobre o curso de {nome_curso_detalhe}:")
            print(detalhes_curso)

        except Exception as e:
            print(f"Ops! Aconteceu um erro ao buscar detalhes do curso com o  Gemini: {e}")
            print("Vamos continuar.")
        quer_detalhes = input("\nGostaria de saber mais detalhes sobre algum curso da lista? (Sim/Não): ").lower()

except Exception as e:
    print(f"Ops! Aconteceu um erro ao gerar ideias com o Gemini: {e}")
    print("Vamos continuar.")

#REPITIDOOOOO
print("\n--- Hora da Reflexão: Checklist do Curso! ---")
    print("Vamos analisar um curso que te interessou usando uma pequena checklist.")

    curso_para_checklist = input("Qual curso você gostaria de analisar com a checklist agora? ")

    respostas_checklist = {}
    print(f"\nOk! Vamos analisar o curso de {curso_para_checklist}.")

    tipo_curso = input("Você pensa neste curso como Bacharelado (1) ou Licenciatura (2)? Digite 1 ou 2: ")

    respostas_checklist["Tipo de curso considerado"] = "Bacharelado" if tipo_curso == "1" else ("Licenciatura" if tipo_curso == "2" else "Não especificado")

    if tipo_curso == "2":
        print("\nVocê escolheu Licenciatura.")
        gosta_vida_professor = input("Você gosta da ideia da vida de um professor (dar aulas, preparar aulas, lidar com alunos)? (Sim/Não): ").lower()
        respostas_checklist["Gosta da vida de professor?"] = gosta_vida_professor

    print(f"\nÓtimo! Agora pense sobre o curso de {curso_para_checklist} e responda (ou reflita) sobre os pontos abaixo:")

    pergunta_1 = "1. Você se imagina estudando os assuntos principais deste curso por 4 ou 5 anos?"
    print(pergunta_1)
    resposta_1 = input("Sua reflexão (Sim/Não/Pensando): ")
    respostas_checklist[pergunta_1] = resposta_1

    print("-" * 30)

    # Pergunta 2
    pergunta_2 = "2. Essa área combina com seus principais interesses, paixões e habilidades?"
    print(pergunta_2)
    resposta_2 = input("Sua reflexão: ")
    respostas_checklist[pergunta_2] = resposta_2

    print("-" * 30)

   print("-" * 30)

    pergunta_3 = "3. Você se vê trabalhando com isso?"
    print(pergunta_3)
    resposta_3 = input("Sua reflexão: ")
    respostas_checklist[pergunta_3] = resposta_3

    print("-" * 30)

    pergunta_4 = "4. Você se interessa pelos assuntos do curso e gostaria de aprende-los mais profundamente?"
    print(pergunta_4)
    resposta_4 = input("Sua reflexão: ")
    respostas_checklist[pergunta_4] = resposta_4

    print("-" * 30)

    pergunta_5 = "5. As matérias e conteúdos que você viu te parecem com a sua ideia do curso?"
    print(pergunta_5)
    resposta_5 = input("Sua reflexão: ")
    respostas_checklist[pergunta_5] = resposta_5

    print("-" * 30)

    pergunta_6 = "6. O tipo de atividades (pesquisa, prática, teoria) que o curso exige combina com você?"
    print(pergunta_6)
    resposta_6 = input("Sua reflexão: ")
    respostas_checklist[pergunta_6] = resposta_6

    print("-" * 30)

    pergunta_7 = "7. Você escolheu por vontade própria, ou foi influência de outros?"
    print(pergunta_7)
    resposta_7 = input("Sua reflexão: ")
    respostas_checklist[pergunta_7] = resposta_7

    print("-" * 30)

    pergunta_8 = "8. Se não existisse pressão nenhuma, você ainda escolheria esse curso?"
    print(pergunta_8)
    resposta_8 = input("Sua reflexão: ")
    respostas_checklist[pergunta_8] = resposta_8

    print("-" * 30)

    print("\nEspero que esta reflexão ajude na sua decisão!")

     score_total = 0.0

    print("\nCalculando seu score de compatibilidade...")

    for pergunta, resposta in respostas_checklist.items():
        resposta_lower = resposta.lower()
        if resposta_lower == "sim":
            score_total += 1
        elif resposta_lower == "pensando" or resposta_lower == "talvez":
            score_total += 0.5


    print(f"Seu score de compatibilidade com o curso de {curso_para_checklist} é: {score_total}")

    limiar_alto_score = 6

    if score_total > limiar_alto_score:
        print(f"\n⭐ Com um score de {score_total}, este curso parece ser uma ótima opção para você! ⭐")
        print("Suas respostas indicam uma forte compatibilidade com o curso e a área.")
    elif score_total >= limiar_alto_score / 2:
         print(f"\n🤔 Seu score para {curso_para_checklist} foi {score_total}. Parece haver boa compatibilidade, mas reflita nos pontos onde não respondeu 'Sim'.")
         print("Pode valer a pena investigar mais ou considerar outros cursos sugeridos.")
    else:
        print(f"\n🚩 Seu score para {curso_para_checklist} foi {score_total}. Este curso pode não ser o ideal neste momento.")
        print("Considere revisitar suas respostas ou explorar outras opções na lista que o Gemini sugeriu.")

nome = input("Opa! :) Sou o KELL, como gostaria de ser chamado?")

import google.generativeai as genai
import os


API_KEY = "AIzaSyAUtm3-czLqusg6hmsTSdgTAb5pJ76wrts"
genai.configure(api_key=API_KEY)


resposta_inicial = input(f" Muito prazer {nome} Você já tem algo em mente sobre qual curso fazer? (Sim/Não): ").lower()

informacao_para_gemini = ""

if resposta_inicial == "sim":
    informacao_para_gemini = input("Isso! Quais os cursos que você inicialmente pensou? ")
    informacao_para_gemini = "O usuário tem interesse nos seguintes cursos: " + informacao_para_gemini

elif resposta_inicial == "não":
    informacao_para_gemini = input("Fique tranquilo isso é normal! Conta pra mim seus interesses, habilidades ou as áreas que você gosta: ")
    informacao_para_gemini = "O usuário não tem cursos em mente, mas tem os seguintes interesses/habilidades: " + informacao_para_gemini

else:
    print("Beleza. Vou te perguntar seus interesses gerais como base.")
    informacao_para_gemini = input("Conta pra mim seus interesses, habilidades ou as áreas que você gosta: ")
    informacao_para_gemini = "O usuário não especificou, mas tem os seguintes interesses/habilidades: " + informacao_para_gemini

model = genai.GenerativeModel('gemini-2.0-flash')

print("\nAguarde um momento!\n")

prompt_para_gemini = f"""Com base nas seguintes informações sobre o usuário:
{informacao_para_gemini}

Por favor, gere algumas ideias de cursos de faculdade ou áreas de estudo que combinem com esses dados. Seja breve e liste as sugestões."""


try:
    response = model.generate_content(prompt_para_gemini)
    ideias_geradas = response.text

    print("🎓 Aqui estão algumas ideias de cursos para você! 🎓")
    print(ideias_geradas)


    quer_detalhes = input("\nGostaria de saber mais detalhes sobre algum curso da lista? (Sim/Não): ").lower()

    while quer_detalhes == "sim":

        nome_curso_detalhe = input("Qual curso você quer saber um pouco mais? (Digite o nome exato do curso): ")

        print(f"\nBuscando mais informações sobre {nome_curso_detalhe}... Aguarde!\n")

        prompt_detalhes_curso = f"""Forneça um breve resumo detalhado sobre o curso de "{nome_curso_detalhe}".
        Inclua informações sobre:
        - Conteúdos abordados/Matérias principais
        - Duração média do curso
        - Principais áreas de atuação profissional
        - Uma estimativa de média salarial (mencione que é uma estimativa e pode variar)
        Seja claro e objetivo."""

        try:
            response_detalhes = model.generate_content(prompt_detalhes_curso)
            detalhes_curso = response_detalhes.text

            # Mostrar os detalhes que o Gemini forneceu
            print(f"📚 Detalhes sobre o curso de {nome_curso_detalhe}:")
            print(detalhes_curso)

        except Exception as e:
            print(f"Ops! Aconteceu um erro ao buscar detalhes do curso com o  Gemini: {e}")
            print("Vamos continuar.")
        quer_detalhes = input("\nGostaria de saber mais detalhes sobre algum curso da lista? (Sim/Não): ").lower()

except Exception as e:
    print(f"Ops! Aconteceu um erro ao gerar ideias com o Gemini: {e}")
    print("Vamos continuar.")

#CERTO

 print("\n--- Hora da Reflexão: Checklist do Curso! ---")
 print("Vamos analisar um curso que te interessou usando uma pequena checklist.")

    curso_para_checklist = input("Qual curso você gostaria de analisar com a checklist agora? ")

    respostas_checklist = {}
    print(f"\nOk! Vamos analisar o curso de {curso_para_checklist}.")

    tipo_curso = input("Você pensa neste curso como Bacharelado (1) ou Licenciatura (2)? Digite 1 ou 2: ")

    respostas_checklist["Tipo de curso considerado"] = "Bacharelado" if tipo_curso == "1" else ("Licenciatura" if tipo_curso == "2" else "Não especificado")

    if tipo_curso == "2":
        print("\nVocê escolheu Licenciatura.")
        gosta_vida_professor = input("Você gosta da ideia da vida de um professor (dar aulas, preparar aulas, lidar com alunos)? (Sim/Não): ").lower()
        respostas_checklist["Gosta da vida de professor?"] = gosta_vida_professor

    print(f"\nÓtimo! Agora pense sobre o curso de {curso_para_checklist} e responda (ou reflita) sobre os pontos abaixo:")

    pergunta_1 = "1. Você se imagina estudando os assuntos principais deste curso por 4 ou 5 anos?"
    print(pergunta_1)
    resposta_1 = input("Sua reflexão (Sim/Não/Pensando): ")
    respostas_checklist[pergunta_1] = resposta_1

    print("-" * 30)

    # Pergunta 2
    pergunta_2 = "2. Essa área combina com seus principais interesses, paixões e habilidades?"
    print(pergunta_2)
    resposta_2 = input("Sua reflexão: ")
    respostas_checklist[pergunta_2] = resposta_2

    print("-" * 30)

    print("-" * 30)

    pergunta_3 = "3. Você se vê trabalhando com isso?"
    print(pergunta_3)
    resposta_3 = input("Sua reflexão: ")
    respostas_checklist[pergunta_3] = resposta_3

    print("-" * 30)

    pergunta_4 = "4. Você se interessa pelos assuntos do curso e gostaria de aprende-los mais profundamente?"
    print(pergunta_4)
    resposta_4 = input("Sua reflexão: ")
    respostas_checklist[pergunta_4] = resposta_4

    print("-" * 30)

    pergunta_5 = "5. As matérias e conteúdos que você viu te parecem com a sua ideia do curso?"
    print(pergunta_5)
    resposta_5 = input("Sua reflexão: ")
    respostas_checklist[pergunta_5] = resposta_5

    print("-" * 30)

    pergunta_6 = "6. O tipo de atividades (pesquisa, prática, teoria) que o curso exige combina com você?"
    print(pergunta_6)
    resposta_6 = input("Sua reflexão: ")
    respostas_checklist[pergunta_6] = resposta_6

    print("-" * 30)

    pergunta_7 = "7. Você escolheu por vontade própria, ou foi influência de outros?"
    print(pergunta_7)
    resposta_7 = input("Sua reflexão: ")
    respostas_checklist[pergunta_7] = resposta_7

    print("-" * 30)

    pergunta_8 = "8. Se não existisse pressão nenhuma, você ainda escolheria esse curso?"
    print(pergunta_8)
    resposta_8 = input("Sua reflexão: ")
    respostas_checklist[pergunta_8] = resposta_8

    print("-" * 30)

    print("\nEspero que esta reflexão ajude na sua decisão!")

     score_total = 0.0

    print("\nCalculando seu score de compatibilidade...")

    for pergunta, resposta in respostas_checklist.items():
        resposta_lower = resposta.lower()
        if resposta_lower == "sim":
            score_total += 1
        elif resposta_lower == "pensando" or resposta_lower == "talvez":
            score_total += 0.5


    print(f"Seu score de compatibilidade com o curso de {curso_para_checklist} é: {score_total}")

    limiar_alto_score = 6

    if score_total > limiar_alto_score:
        print(f"\n⭐ Com um score de {score_total}, este curso parece ser uma ótima opção para você! ⭐")
        print("Suas respostas indicam uma forte compatibilidade com o curso e a área.")
    elif score_total >= limiar_alto_score / 2:
         print(f"\n🤔 Seu score para {curso_para_checklist} foi {score_total}. Parece haver boa compatibilidade, mas reflita nos pontos onde não respondeu 'Sim'.")
         print("Pode valer a pena investigar mais ou considerar outros cursos sugeridos.")
    else:
        print(f"\n🚩 Seu score para {curso_para_checklist} foi {score_total}. Este curso pode não ser o ideal neste momento.")
        print("Considere revisitar suas respostas ou explorar outras opções na lista que o Gemini sugeriu.")






    print("\n--- Hora da Reflexão: Checklist do Curso! ---")
    print("Vamos analisar um curso que te interessou usando uma pequena checklist.")

    curso_para_checklist = input("Qual curso você gostaria de analisar com a checklist agora? ")

    respostas_checklist = {}
    print(f"\nOk! Vamos analisar o curso de {curso_para_checklist}.")

    tipo_curso = input("Você pensa neste curso como Bacharelado (1) ou Licenciatura (2)? Digite 1 ou 2: ")

    respostas_checklist["Tipo de curso considerado"] = "Bacharelado" if tipo_curso == "1" else ("Licenciatura" if tipo_curso == "2" else "Não especificado")

    if tipo_curso == "2":
        print("\nVocê escolheu Licenciatura.")
        gosta_vida_professor = input("Você gosta da ideia da vida de um professor (dar aulas, preparar aulas, lidar com alunos)? (Sim/Não): ").lower()
        respostas_checklist["Gosta da vida de professor?"] = gosta_vida_professor

    print(f"\nÓtimo! Agora pense sobre o curso de {curso_para_checklist} e responda (ou reflita) sobre os pontos abaixo:")

    pergunta_1 = "1. Você se imagina estudando os assuntos principais deste curso por 4 ou 5 anos?"
    print(pergunta_1)
    resposta_1 = input("Sua reflexão (Sim/Não/Pensando): ")
    respostas_checklist[pergunta_1] = resposta_1

    print("-" * 30)

    # Pergunta 2
    pergunta_2 = "2. Essa área combina com seus principais interesses, paixões e habilidades?"
    print(pergunta_2)
    resposta_2 = input("Sua reflexão: ")
    respostas_checklist[pergunta_2] = resposta_2

    print("-" * 30)

    print("-" * 30)

    pergunta_3 = "3. Você se vê trabalhando com isso?"
    print(pergunta_3)
    resposta_3 = input("Sua reflexão: ")
    respostas_checklist[pergunta_3] = resposta_3

    print("-" * 30)

    pergunta_4 = "4. Você se interessa pelos assuntos do curso e gostaria de aprende-los mais profundamente?"
    print(pergunta_4)
    resposta_4 = input("Sua reflexão: ")
    respostas_checklist[pergunta_4] = resposta_4

    print("-" * 30)

    pergunta_5 = "5. As matérias e conteúdos que você viu te parecem com a sua ideia do curso?"
    print(pergunta_5)
    resposta_5 = input("Sua reflexão: ")
    respostas_checklist[pergunta_5] = resposta_5

    print("-" * 30)

    pergunta_6 = "6. O tipo de atividades (pesquisa, prática, teoria) que o curso exige combina com você?"
    print(pergunta_6)
    resposta_6 = input("Sua reflexão: ")
    respostas_checklist[pergunta_6] = resposta_6

    print("-" * 30)

    pergunta_7 = "7. Você escolheu por vontade própria, ou foi influência de outros?"
    print(pergunta_7)
    resposta_7 = input("Sua reflexão: ")
    respostas_checklist[pergunta_7] = resposta_7

    print("-" * 30)

    pergunta_8 = "8. Se não existisse pressão nenhuma, você ainda escolheria esse curso?"
    print(pergunta_8)
    resposta_8 = input("Sua reflexão: ")
    respostas_checklist[pergunta_8] = resposta_8

    print("-" * 30)

    print("\nEspero que esta reflexão ajude na sua decisão!")

     score_total = 0.0

    print("\nCalculando seu score de compatibilidade...")

    for pergunta, resposta in respostas_checklist.items():
        resposta_lower = resposta.lower()
        if resposta_lower == "sim":
            score_total += 1
        elif resposta_lower == "pensando" or resposta_lower == "talvez":
            score_total += 0.5


    print(f"Seu score de compatibilidade com o curso de {curso_para_checklist} é: {score_total}")

    limiar_alto_score = 6

    if score_total > limiar_alto_score:
        print(f"\n⭐ Com um score de {score_total}, este curso parece ser uma ótima opção para você! ⭐")
        print("Suas respostas indicam uma forte compatibilidade com o curso e a área.")
    elif score_total >= limiar_alto_score / 2:
         print(f"\n🤔 Seu score para {curso_para_checklist} foi {score_total}. Parece haver boa compatibilidade, mas reflita nos pontos onde não respondeu 'Sim'.")
         print("Pode valer a pena investigar mais ou considerar outros cursos sugeridos.")
    else:
        print(f"\n🚩 Seu score para {curso_para_checklist} foi {score_total}. Este curso pode não ser o ideal neste momento.")
        print("Considere revisitar suas respostas ou explorar outras opções na lista que o Gemini sugeriu.")




    print("\n--- Hora da Reflexão: Checklist do Curso! ---")
    print("Vamos analisar um curso que te interessou usando uma pequena checklist.")

    curso_para_checklist = input("Qual curso você gostaria de analisar com a checklist agora? ")

    respostas_checklist_deste_curso = {}

    #Bacharelado ou Licenciatura para ESTE curso ---
    print(f"\nOk! Vamos analisar o curso de {curso_para_checklist}.")

    tipo_curso = input("Você pensa neste curso como Bacharelado (1) ou Licenciatura (2)? Digite 1 ou 2: ")
    respostas_checklist_deste_curso["Tipo de curso considerado"] = "Bacharelado" if tipo_curso == "1" else ("Licenciatura" if tipo_curso == "2" else "Não especificado")

    if tipo_curso == "2":
        print("\nVocê escolheu Licenciatura.")
        gosta_vida_professor = input("Você gosta da ideia da vida de um professor (dar aulas, preparar materiais, lidar com alunos)? (Sim/Não): ").lower()
        respostas_checklist_deste_curso["Gosta da ideia da vida de professor?"] = gosta_vida_professor # Chave atualizada para ser mais clara

        print("-" * 30) # Separador

        # Nova Pergunta 1 sobre vida de professor
        pergunta_professor_1 = "Você se sente confortável falando em público para grupos de pessoas (turmas de alunos)? (Sim/Não): "
        print(pergunta_professor_1)
        resposta_professor_1 = input("Sua reflexão: ").lower() # Já pegamos em minúsculas
        respostas_checklist_deste_curso[pergunta_professor_1] = resposta_professor_1 # Guarda no dicionário

        print("-" * 30) # Separador

        # Nova Pergunta 2 sobre vida de professor
        pergunta_professor_2 = "Você tem paciência para explicar o mesmo assunto de diferentes formas até que alguém entenda? (Sim/Não): "
        print(pergunta_professor_2)
        resposta_professor_2 = input("Sua reflexão: ").lower() # Já pegamos em minúsculas
        respostas_checklist_deste_curso[pergunta_professor_2] = resposta_professor_2 # Guarda no dicionário


    print(f"\nÓtimo! Agora pense sobre o curso de {curso_para_checklist} e responda (ou reflita) sobre os pontos abaixo:")
    pergunta_1 = "1. Você se imagina estudando os assuntos principais deste curso por 4 ou 5 anos?"
    print(pergunta_1)
    resposta_1 = input("Sua reflexão (Sim/Não/Pensando): ")
    respostas_checklist[pergunta_1] = resposta_1

    print("-" * 30)

    # Pergunta 2
    pergunta_2 = "2. Essa área combina com seus principais interesses, paixões e habilidades?"
    print(pergunta_2)
    resposta_2 = input("Sua reflexão: ")
    respostas_checklist[pergunta_2] = resposta_2

    print("-" * 30)

    print("-" * 30)

    pergunta_3 = "3. Você se vê trabalhando com isso?"
    print(pergunta_3)
    resposta_3 = input("Sua reflexão: ")
    respostas_checklist[pergunta_3] = resposta_3

    print("-" * 30)

    pergunta_4 = "4. Você se interessa pelos assuntos do curso e gostaria de aprende-los mais profundamente?"
    print(pergunta_4)
    resposta_4 = input("Sua reflexão: ")
    respostas_checklist[pergunta_4] = resposta_4

    print("-" * 30)

    pergunta_5 = "5. As matérias e conteúdos que você viu te parecem com a sua ideia do curso?"
    print(pergunta_5)
    resposta_5 = input("Sua reflexão: ")
    respostas_checklist[pergunta_5] = resposta_5

    print("-" * 30)

    pergunta_6 = "6. O tipo de atividades (pesquisa, prática, teoria) que o curso exige combina com você?"
    print(pergunta_6)
    resposta_6 = input("Sua reflexão: ")
    respostas_checklist[pergunta_6] = resposta_6

    print("-" * 30)

    pergunta_7 = "7. Você escolheu por vontade própria, ou foi influência de outros?"
    print(pergunta_7)
    resposta_7 = input("Sua reflexão: ")
    respostas_checklist[pergunta_7] = resposta_7

    print("-" * 30)

    pergunta_8 = "8. Se não existisse pressão nenhuma, você ainda escolheria esse curso?"
    print(pergunta_8)
    resposta_8 = input("Sua reflexão: ")
    respostas_checklist[pergunta_8] = resposta_8

    print("-" * 30)

    print("\nEspero que esta reflexão ajude na sua decisão!")

     score_total = 0.0

    print("\nCalculando seu score de compatibilidade...")

    for pergunta, resposta in respostas_checklist.items():
        resposta_lower = resposta.lower()
        if resposta_lower == "sim":
            score_total += 1
        elif resposta_lower == "pensando" or resposta_lower == "talvez":
            score_total += 0.5


    print(f"Seu score de compatibilidade com o curso de {curso_para_checklist} é: {score_total}")

    limiar_alto_score = 6

    if score_total > limiar_alto_score:
        print(f"\n⭐ Com um score de {score_total}, este curso parece ser uma ótima opção para você! ⭐")
        print("Suas respostas indicam uma forte compatibilidade com o curso e a área.")
    elif score_total >= limiar_alto_score / 2:
         print(f"\n🤔 Seu score para {curso_para_checklist} foi {score_total}. Parece haver boa compatibilidade, mas reflita nos pontos onde não respondeu 'Sim'.")
         print("Pode valer a pena investigar mais ou considerar outros cursos sugeridos.")
    else:
        print(f"\n🚩 Seu score para {curso_para_checklist} foi {score_total}. Este curso pode não ser o ideal neste momento.")
        print("Considere revisitar suas respostas ou explorar outras opções na lista que o Gemini sugeriu.")
    resultados_checklists_geral[curso_para_checklist] = respostas_checklist_deste_curso

    print("\nResultado desta checklist guardado!")

    quer_fazer_checklist = input("\nGostaria de fazer a Checklist para OUTRO curso? (Sim/Não): ").lower()



print("\nOk! Checklist(s) finalizada(s).")

if not resultados_checklists_geral:
    print("\nNenhuma checklist foi preenchida. Não é possível gerar uma conclusão.")
else:
    resumo_resultados_para_gemini = "Resultados das Checklists de Cursos preenchidas pelo usuário:\n\n"

    for nome_curso, respostas_curso in resultados_checklists_geral.items():
        resumo_resultados_para_gemini += f"--- Curso: {nome_curso} ---\n"

        score_guardado = respostas_curso.get("Score Calculado", "Não calculado")

        resumo_resultados_para_gemini += f"Score Calculado: {score_guardado}\n"


        resumo_resultados_para_gemini += "Respostas Detalhadas:\n"
        for pergunta, resposta in respostas_curso.items():
            if pergunta != "Score Calculado":
                 resumo_resultados_para_gemini += f"- {pergunta}: {resposta}\n"

        resumo_resultados_para_gemini += "\n"



    print("\n--- Analisando O CURSO com o Gemini... ---")
    print("Gerando sua conclusão. Aguarde um momento!")

    prompt_conclusao_final = f"""
Você é um assistente de orientação de carreira. Analise os resultados de checklist de cursos preenchidos por um usuário, que estão formatados abaixo.

{resumo_resultados_para_gemini} # <-- Aqui incluímos todos os resultados formatados

Com base nesses resultados, por favor:
1. Avalie a compatibilidade do usuário com cada curso, considerando o 'Score Calculado' e as respostas detalhadas, especialmente as relacionadas ao 'Tipo de curso considerado' (Bacharelado ou Licenciatura) e às perguntas sobre a vida de professor.
2. Identifique os cursos com os maiores scores (por exemplo, score maior que 6) que parecem ter maior compatibilidade.
3. Se houver cursos com scores altos, relacione-os e destaque os pontos fortes indicados pelas respostas da checklist para cada um.
4. Se possível, com base na análise, sugira UM curso que pareça ser o 'melhor match', MAS ENFATIZE CLARAMENTE que esta é apenas UMA SUGESTÃO baseada nos dados fornecidos e que a decisão final é pessoal.
5. Apresente a conclusão de forma clara e organizada para o usuário. Use emojis se apropriado.
6. Se não houver cursos com scores altos, oriente o usuário a refletir nas respostas onde o score foi baixo ou a explorar outras opções.

Seja encorajador e prestativo na sua conclusão.
lembre de ser sucinto
"""

    try:
        response_final = model.generate_content(prompt_conclusao_final)
        conclusao_gemini = response_final.text

        print("\n--- Sua Conclusão Personalizada do Gemini! ---")
        print(conclusao_gemini)
        print("\n--- Fim da Conclusão ---")


    except Exception as e:
        print(f"\nOps! Aconteceu um erro ao gerar a conclusão com o Gemini: {e}")
        print("Não foi possível obter a conclusão neste momento. Verifique a API Key e a conexão.")

import google.generativeai as genai
import os

nome = input("Opa! :) Sou o KELL, como gostaria de ser chamado? ")

API_KEY = "AIzaSyAUtm3-czLqusg6hmsTSdgTAb5pJ76wrts"
genai.configure(api_key=API_KEY)

resposta_inicial = input(f" Muito prazer {nome}! Você já tem algo em mente sobre qual curso fazer? (Sim/Não): ").lower()

informacao_para_gemini = ""

if resposta_inicial == "sim":
    informacao_para_gemini = input("Isso! Quais os cursos que você inicialmente pensou? ")
    informacao_para_gemini = "O usuário tem interesse nos seguintes cursos: " + informacao_para_gemini
elif resposta_inicial == "não":
    informacao_para_gemini = input("Fique tranquilo isso é normal! Conta pra mim seus interesses, habilidades ou as áreas que você gosta: ")
    informacao_para_gemini = "O usuário não tem cursos em mente, mas tem os seguintes interesses/habilidades: " + informacao_para_gemini
else:
    print("Beleza. Vou te perguntar seus interesses gerais como base.")
    informacao_para_gemini = input("Conta pra mim seus interesses, habilidades ou as áreas que você gosta: ")
    informacao_para_gemini = "O usuário não especificou, mas tem os seguintes interesses/habilidades: " + informacao_para_gemini

model = genai.GenerativeModel('gemini-2.0-flash')

print("\nAguarde um momento!\n")

prompt_para_gemini = f"""Com base nas seguintes informações sobre o usuário:
{informacao_para_gemini}

Por favor, gere algumas ideias de cursos de faculdade ou áreas de estudo que combinem com esses dados. De opçoes de licenciatura e bacharelado Seja breve e liste as sugestões."""

try:
    response = model.generate_content(prompt_para_gemini)
    ideias_geradas = response.text

    print("🎓 Aqui estão algumas ideias de cursos para você! 🎓")
    print(ideias_geradas)

    quer_detalhes = input("\nGostaria de saber mais detalhes sobre algum curso da lista? (Sim/Não): ").lower()

    while quer_detalhes == "sim":
        nome_curso_detalhe = input("Qual curso você quer saber um pouco mais? (Digite o nome exato do curso): ")

        print(f"\nBuscando mais informações sobre {nome_curso_detalhe}... Aguarde!\n")

        prompt_detalhes_curso = f"""Forneça um breve resumo detalhado sobre o curso de "{nome_curso_detalhe}".
Inclua informações sobre:
- Conteúdos abordados/Matérias principais
- Duração média do curso
- Principais áreas de atuação profissional
- Uma estimativa de média salarial (mencione que é uma estimativa e pode variar)
Seja claro e objetivo."""

        try:
            response_detalhes = model.generate_content(prompt_detalhes_curso)
            detalhes_curso = response_detalhes.text

            print(f"📚 Detalhes sobre o curso de {nome_curso_detalhe}:")
            print(detalhes_curso)

        except Exception as e:
            print(f"Ops! Aconteceu um erro ao buscar detalhes do curso com o Gemini: {e}")
            print("Vamos continuar.")

        quer_detalhes = input("\nGostaria de saber detalhes sobre mais algum curso? (Sim/Não): ").lower()

    # --- Parte para Múltiplas Checklists ---
    resultados_checklists_geral = {}
    quer_fazer_checklist = input("\nGostaria de analisar algum curso com a Checklist para ajudar a achar sua vocação? (Sim/Não): ").lower()

    while quer_fazer_checklist == "sim":
        print("\n--- Hora da Reflexão: Checklist do Curso! ---")
        print("Vamos analisar um curso que te interessou usando uma pequena checklist.")

        curso_para_checklist = input("Qual curso você gostaria de analisar com a checklist agora? ")

        respostas_checklist_deste_curso = {}

        print(f"\nOk! Vamos analisar o curso de {curso_para_checklist}.")

        tipo_curso = input("Você pensa neste curso como Bacharelado (1) ou Licenciatura (2)? Digite 1 ou 2: ")
        respostas_checklist_deste_curso["Tipo de curso considerado"] = "Bacharelado" if tipo_curso == "1" else ("Licenciatura" if tipo_curso == "2" else "Não especificado")

        if tipo_curso == "2":
            print("\nVocê escolheu Licenciatura.")
            gosta_vida_professor = input("Você gosta da ideia da vida de um professor (dar aulas, preparar materiais, lidar com alunos)? (Sim/Não): ").lower()
            respostas_checklist_deste_curso["Gosta da ideia da vida de professor?"] = gosta_vida_professor

            print("-" * 30)

            pergunta_professor_1 = "Você se sente confortável falando em público para grupos de pessoas (turmas de alunos)? (Sim/Não): "
            print(pergunta_professor_1)
            resposta_professor_1 = input("Sua reflexão: ").lower()
            respostas_checklist_deste_curso[pergunta_professor_1] = resposta_professor_1

            print("-" * 30)

            pergunta_professor_2 = "Você tem paciência para explicar o mesmo assunto de diferentes formas até que alguém entenda? (Sim/Não): "
            print(pergunta_professor_2)
            resposta_professor_2 = input("Sua reflexão: ").lower()
            respostas_checklist_deste_curso[pergunta_professor_2] = resposta_professor_2

        print(f"\nÓtimo! Agora pense sobre o curso de {curso_para_checklist} e responda (ou reflita) sobre os pontos abaixo:")

        pergunta_1 = "1. Você se imagina estudando os assuntos principais deste curso por 4 ou 5 anos?"
        print(pergunta_1)
        resposta_1 = input("Sua reflexão (Sim/Não/Pensando): ").lower()
        respostas_checklist_deste_curso[pergunta_1] = resposta_1

        print("-" * 30)

        pergunta_2 = "2. Essa área combina com seus principais interesses, paixões e habilidades?"
        print(pergunta_2)
        resposta_2 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_2] = resposta_2

        print("-" * 30)

        pergunta_3 = "3. Você se vê trabalhando com isso?"
        print(pergunta_3)
        resposta_3 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_3] = resposta_3

        print("-" * 30)

        pergunta_4 = "4. Você se interessa pelos assuntos do curso e gostaria de aprende-los mais profundamente?"
        print(pergunta_4)
        resposta_4 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_4] = resposta_4

        print("-" * 30)

        pergunta_5 = "5. As matérias e conteúdos que você viu te parecem com a sua ideia do curso?"
        print(pergunta_5)
        resposta_5 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_5] = resposta_5

        print("-" * 30)

        pergunta_6 = "6. O tipo de atividades (pesquisa, prática, teoria) que o curso exige combina com você?"
        print(pergunta_6)
        resposta_6 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_6] = resposta_6

        print("-" * 30)

        pergunta_7 = "7. Você escolheu por vontade própria?"
        print(pergunta_7)
        resposta_7 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_7] = resposta_7

        print("-" * 30)

        pergunta_8 = "8. Se não existisse pressão nenhuma, você ainda escolheria esse curso?"
        print(pergunta_8)
        resposta_8 = input("Sua reflexão: ").lower()
        respostas_checklist_deste_curso[pergunta_8] = resposta_8

        print("-" * 30)

        print("\nEspero que esta reflexão ajude na sua decisão!")

        # Calcular Score para ESTE curso e GUARDAR no dicionário
        score_total_deste_curso = 0.0
        print("\nCalculando seu score de compatibilidade...")

        for pergunta, resposta in respostas_checklist_deste_curso.items():
            resposta_lower = resposta.lower()
            if resposta_lower == "sim":
                score_total_deste_curso += 1
            elif resposta_lower == "pensando" or resposta_lower == "talvez":
                score_total_deste_curso += 0.5

        respostas_checklist_deste_curso["Score Calculado"] = score_total_deste_curso # Guarda o score no dicionário deste curso

        # Mostrar Score Individual para ESTE curso (usando o score guardado)
        score_para_interpretar = respostas_checklist_deste_curso.get('Score Calculado', 0.0) # Pega o score guardado, padrão 0.0

        print(f"Seu score de compatibilidade com o curso de {curso_para_checklist} é: {score_para_interpretar}")

        limiar_alto_score = 6

        if score_para_interpretar > limiar_alto_score:
            print(f"\n⭐ Com um score de {score_para_interpretar}, este curso parece ser uma ótima opção para você! ⭐")
            print("Suas respostas indicam uma forte compatibilidade com o curso e a área.")
        elif score_para_interpretar >= limiar_alto_score / 2:
             print(f"\n🤔 Seu score para {curso_para_checklist} foi {score_para_interpretar}. Parece haver boa compatibilidade, mas reflita nos pontos onde não respondeu 'Sim'.")
             print("Pode valer a pena investigar mais ou considerar outros cursos sugeridos.")
        else:
            print(f"\n🚩 Seu score para {curso_para_checklist} foi {score_para_interpretar}. Este curso pode não ser o ideal neste momento.")
            print("Considere revisitar suas respostas ou explorar outras opções na lista que o Gemini sugeriu.")

        # AGORA, guardar o dicionário DESTE curso (que agora tem o score) no dicionário GERAL
        resultados_checklists_geral[curso_para_checklist] = respostas_checklist_deste_curso

        print("\nResultado desta checklist guardado!")

        quer_fazer_checklist = input("\nGostaria de fazer a Checklist para OUTRO curso? (Sim/Não): ").lower()

    print("\nOk! Checklist(s) finalizada(s).")

    if not resultados_checklists_geral:
        print("\nNenhuma checklist foi preenchida. Não é possível gerar uma conclusão.")
    else:
        # --- Parte para Preparar os Dados para o Gemini (Conclusão) ---
        resumo_resultados_para_gemini = "Resultados das Checklists de Cursos preenchidas pelo usuário:\n\n"

        for nome_curso, respostas_curso in resultados_checklists_geral.items():
            resumo_resultados_para_gemini += f"--- Curso: {nome_curso} ---\n"

            score_guardado = respostas_curso.get("Score Calculado", "Não calculado")

            resumo_resultados_para_gemini += f"Score Calculado: {score_guardado}\n"

            resumo_resultados_para_gemini += "Respostas Detalhadas:\n"
            for pergunta, resposta in respostas_curso.items():
                if pergunta != "Score Calculado":
                    resumo_resultados_para_gemini += f"- {pergunta}: {resposta}\n"

            resumo_resultados_para_gemini += "\n"

        # --- FIM da Parte de Preparar os Dados ---

        # --- PARTE PARA CRIAR O PROMPT FINAL E CHAMAR O GEMINI ---
        print("\n--- Analisando resultados com o Gemini... ---")
        print("Gerando sua conclusão. Aguarde um momento!")

        prompt_conclusao_final = f"""
Você é um assistente de orientação de carreira. Analise os resultados de checklist de cursos preenchidas por um usuário, que estão formatados abaixo.

{resumo_resultados_para_gemini}

Com base nesses resultados, por favor:
1. Avalie a compatibilidade do usuário com cada curso, considerando o 'Score Calculado' e as respostas detalhadas, especialmente as relacionadas ao 'Tipo de curso considerado' (Bacharelado ou Licenciatura) e às perguntas sobre a vida de professor.
2. Identifique os cursos com os maiores scores (por exemplo, score maior que 6) que parecem ter maior compatibilidade.
3. Se houver cursos com scores altos, relacione-os e destaque os pontos fortes indicados pelas respostas da checklist para cada um.
4. Se possível, com base na análise, sugira UM curso que pareça ser o 'melhor match', MAS ENFATIZE CLARAMENTE que esta é apenas UMA SUGESTÃO baseada nos dados fornecidos e que a decisão final é pessoal.
5. Apresente a conclusão de forma clara e organizada para o usuário. Use emojis se apropriado.
6. Se não houver cursos com scores altos, oriente o usuário a refletir nas respostas onde o score foi baixo ou a explorar outras opções.
7. Fale de:
- Conteúdos abordados/Matérias principais
- Duração média do curso
- Principais áreas de atuação profissional
- Uma estimativa de média salarial (mencione que é uma estimativa e pode variar)

Seja encorajador e prestativo na sua conclusão.
lembre de ser sucinto
"""

        try:
            response_final = model.generate_content(prompt_conclusao_final)
            conclusao_gemini = response_final.text

            print("\n--- Sua Conclusão Personalizada do Gemini! ---")
            print(conclusao_gemini)
            print("\n--- Fim da Conclusão ---")

        except Exception as e:
            print(f"\nOps! Aconteceu um erro ao gerar a conclusão com o Gemini: {e}")
            print("Não foi possível obter a conclusão neste momento. Verifique a API Key e a conexão.")
        # --- FIM DA PARTE DE CHAMAR O GEMINI PARA CONCLUSÃO ---

except Exception as e:
    # Este except principal pega erros que podem ter acontecido na primeira chamada ao Gemini (lista de cursos)
    print(f"\nOps! Aconteceu um erro geral no início do processo: {e}")
    print("Algo deu errado antes da checklist. Verifique a API Key e a conexão.")

print("\nPrograma de Orientação Finalizado. Espero ter ajudado na sua jornada!")